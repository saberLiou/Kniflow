openapi: 3.0.3
info:
    title: 'Kniflow API Documentation'
    description: 'A RESTful API backend of a simple blog.'
    version: '2021.02'
servers:
    -
        url: 'http://kniflow.test'
paths:
    /api/register:
        post:
            summary: '1-1. Register a user with a personal access token for the device.'
            description: ''
            parameters:
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, when registration succeeded.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    jsonapi: { version: '2021.02' }
                                    data: { id: 1, type: users, attributes: { name: saberLiou, email: saberliou@gmail.com, email_verified_at: null, created_at: '1970-01-01 00:00:00', updated_at: '1970-01-01 00:00:00', token: '{personal-access-token}' }, relationships: { tokens: { data: [{ id: 1, tokenable_type: users, tokenable_id: 1, name: 'saberLiou''s Pixel', abilities: ['*'], last_used_at: null, created_at: '1970-01-01 00:00:00', updated_at: '1970-01-01 00:00:00' }] }, categories: [], posts: [] } }
                                    links: { self: 'http://kniflow.test/api/register' }
                                properties:
                                    jsonapi: { type: object, example: { version: '2021.02' } }
                                    data: { type: object, example: { id: 1, type: users, attributes: { name: saberLiou, email: saberliou@gmail.com, email_verified_at: null, created_at: '1970-01-01 00:00:00', updated_at: '1970-01-01 00:00:00', token: '{personal-access-token}' }, relationships: { tokens: { data: [{ id: 1, tokenable_type: users, tokenable_id: 1, name: 'saberLiou''s Pixel', abilities: ['*'], last_used_at: null, created_at: '1970-01-01 00:00:00', updated_at: '1970-01-01 00:00:00' }] }, categories: [], posts: [] } } }
                                    links: { type: object, example: { self: 'http://kniflow.test/api/register' } }
                422:
                    description: '422, when any validation failed.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    jsonapi: { version: '2021.02' }
                                    errors: [{ status: '422', source: { pointer: /data/attributes/name, parameter: '' }, title: 'Invalid Attribute', detail: '{validation-error-message}' }, { status: '422', source: { pointer: /data/attributes/email, parameter: '' }, title: 'Invalid Attribute', detail: '{validation-error-message}' }, { status: '422', source: { pointer: /data/attributes/password, parameter: '' }, title: 'Invalid Attribute', detail: '{validation-error-message}' }, { status: '422', source: { pointer: /data/attributes/device_name, parameter: '' }, title: 'Invalid Attribute', detail: '{validation-error-message}' }]
                                properties:
                                    jsonapi: { type: object, example: { version: '2021.02' } }
                                    errors: { type: array, example: [{ status: '422', source: { pointer: /data/attributes/name, parameter: '' }, title: 'Invalid Attribute', detail: '{validation-error-message}' }, { status: '422', source: { pointer: /data/attributes/email, parameter: '' }, title: 'Invalid Attribute', detail: '{validation-error-message}' }, { status: '422', source: { pointer: /data/attributes/password, parameter: '' }, title: 'Invalid Attribute', detail: '{validation-error-message}' }, { status: '422', source: { pointer: /data/attributes/device_name, parameter: '' }, title: 'Invalid Attribute', detail: '{validation-error-message}' }], items: { type: object } }
            tags:
                - '01. Authentication'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: 'The name of the user.'
                                    example: saberLiou
                                email:
                                    type: string
                                    description: 'The email of the user. value 必須是有效的 E-mail。.'
                                    example: saberliou@gmail.com
                                password:
                                    type: string
                                    description: 'The password of the user.'
                                    example: '12345678'
                                device_name:
                                    type: string
                                    description: 'The device name of the user.'
                                    example: 'saberLiou''s Pixel'
                            required:
                                - name
                                - email
                                - password
                                - device_name
            security: []
    /api/login:
        post:
            summary: '1-2. Login a user with a new personal access token for the device.'
            description: ''
            parameters:
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, when login succeeded.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    jsonapi: { version: '2021.02' }
                                    data: { id: 1, type: users, attributes: { name: saberLiou, email: saberliou@gmail.com, email_verified_at: null, created_at: '1970-01-01 00:00:00', updated_at: '1970-01-01 00:00:00', token: '{personal-access-token}' }, relationships: { tokens: { data: [{ id: 2, tokenable_type: users, tokenable_id: 1, name: 'saberLiou''s Pixel', abilities: ['*'], last_used_at: null, created_at: '1970-01-01 00:00:01', updated_at: '1970-01-01 00:00:01' }] }, categories: [], posts: [] } }
                                    links: { self: 'http://kniflow.test/api/login' }
                                properties:
                                    jsonapi: { type: object, example: { version: '2021.02' } }
                                    data: { type: object, example: { id: 1, type: users, attributes: { name: saberLiou, email: saberliou@gmail.com, email_verified_at: null, created_at: '1970-01-01 00:00:00', updated_at: '1970-01-01 00:00:00', token: '{personal-access-token}' }, relationships: { tokens: { data: [{ id: 2, tokenable_type: users, tokenable_id: 1, name: 'saberLiou''s Pixel', abilities: ['*'], last_used_at: null, created_at: '1970-01-01 00:00:01', updated_at: '1970-01-01 00:00:01' }] }, categories: [], posts: [] } } }
                                    links: { type: object, example: { self: 'http://kniflow.test/api/login' } }
                422:
                    description: '422, when any validation failed.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    jsonapi: { version: '2021.02' }
                                    errors: [{ status: '422', source: { pointer: /data/attributes/email, parameter: '' }, title: 'Invalid Attribute', detail: '{validation-error-message}' }, { status: '422', source: { pointer: /data/attributes/password, parameter: '' }, title: 'Invalid Attribute', detail: '{validation-error-message}' }, { status: '422', source: { pointer: /data/attributes/device_name, parameter: '' }, title: 'Invalid Attribute', detail: '{validation-error-message}' }]
                                properties:
                                    jsonapi: { type: object, example: { version: '2021.02' } }
                                    errors: { type: array, example: [{ status: '422', source: { pointer: /data/attributes/email, parameter: '' }, title: 'Invalid Attribute', detail: '{validation-error-message}' }, { status: '422', source: { pointer: /data/attributes/password, parameter: '' }, title: 'Invalid Attribute', detail: '{validation-error-message}' }, { status: '422', source: { pointer: /data/attributes/device_name, parameter: '' }, title: 'Invalid Attribute', detail: '{validation-error-message}' }], items: { type: object } }
            tags:
                - '01. Authentication'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    description: 'The email of the user. value 必須是有效的 E-mail。.'
                                    example: saberliou@gmail.com
                                password:
                                    type: string
                                    description: 'The password of the user.'
                                    example: '12345678'
                                device_name:
                                    type: string
                                    description: 'The device name of the user.'
                                    example: 'saberLiou''s Pixel'
                            required:
                                - email
                                - password
                                - device_name
            security: []
    /api/logout:
        post:
            summary: '1-3. Logout a user with all the personal access tokens being revoked on the device.'
            description: ''
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {personal-access-token}'
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, when logout succeeded.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    jsonapi: { version: '2021.02' }
                                    data: { id: 1, type: users, attributes: { name: saberLiou, email: saberliou@gmail.com, email_verified_at: null, created_at: '1970-01-01 00:00:00', updated_at: '1970-01-01 00:00:00' }, relationships: { tokens: [], categories: [], posts: [] } }
                                    links: { self: 'http://kniflow.test/api/logout' }
                                properties:
                                    jsonapi: { type: object, example: { version: '2021.02' } }
                                    data: { type: object, example: { id: 1, type: users, attributes: { name: saberLiou, email: saberliou@gmail.com, email_verified_at: null, created_at: '1970-01-01 00:00:00', updated_at: '1970-01-01 00:00:00' }, relationships: { tokens: [], categories: [], posts: [] } } }
                                    links: { type: object, example: { self: 'http://kniflow.test/api/logout' } }
                401:
                    description: '401, without personal access token.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    jsonapi: { version: '2021.02' }
                                    errors: [{ status: '401', source: { pointer: '', parameter: '' }, title: Unauthorized, detail: Unauthenticated. }]
                                properties:
                                    jsonapi: { type: object, example: { version: '2021.02' } }
                                    errors: { type: array, example: [{ status: '401', source: { pointer: '', parameter: '' }, title: Unauthorized, detail: Unauthenticated. }], items: { type: object } }
                422:
                    description: '422, when any validation failed.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    jsonapi: { version: '2021.02' }
                                    errors: [{ status: '422', source: { pointer: /data/attributes/device_name, parameter: '' }, title: 'Invalid Attribute', detail: '{validation-error-message}' }]
                                properties:
                                    jsonapi: { type: object, example: { version: '2021.02' } }
                                    errors: { type: array, example: [{ status: '422', source: { pointer: /data/attributes/device_name, parameter: '' }, title: 'Invalid Attribute', detail: '{validation-error-message}' }], items: { type: object } }
            tags:
                - '01. Authentication'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                device_name:
                                    type: string
                                    description: 'The device name of the user.'
                                    example: 'saberLiou''s Pixel'
                            required:
                                - device_name
    /api/categories:
        post:
            summary: '2-2. Store a newly created category in storage.'
            description: ''
            parameters:
                -
                    in: header
                    name: Authorization
                    description: ''
                    example: 'Bearer {personal-access-token}'
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, when category created.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    jsonapi: { version: '2021.02' }
                                    data: { id: 1, type: categories, attributes: { slug: saberliou, name: saberLiou, sort: 0, created_at: '1970-01-01 00:00:01', updated_at: '1970-01-01 00:00:01' }, relationships: { user: { data: { id: 1, name: saberLiou, email: saberliou@gmail.com, email_verified_at: null, created_at: '1970-01-01 00:00:00', updated_at: '1970-01-01 00:00:00' } }, posts: [] } }
                                    links: { self: 'http://kniflow.test/api/categories' }
                                properties:
                                    jsonapi: { type: object, example: { version: '2021.02' } }
                                    data: { type: object, example: { id: 1, type: categories, attributes: { slug: saberliou, name: saberLiou, sort: 0, created_at: '1970-01-01 00:00:01', updated_at: '1970-01-01 00:00:01' }, relationships: { user: { data: { id: 1, name: saberLiou, email: saberliou@gmail.com, email_verified_at: null, created_at: '1970-01-01 00:00:00', updated_at: '1970-01-01 00:00:00' } }, posts: [] } } }
                                    links: { type: object, example: { self: 'http://kniflow.test/api/categories' } }
                401:
                    description: '401, without personal access token.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    jsonapi: { version: '2021.02' }
                                    errors: [{ status: '401', source: { pointer: '', parameter: '' }, title: Unauthorized, detail: Unauthenticated. }]
                                properties:
                                    jsonapi: { type: object, example: { version: '2021.02' } }
                                    errors: { type: array, example: [{ status: '401', source: { pointer: '', parameter: '' }, title: Unauthorized, detail: Unauthenticated. }], items: { type: object } }
                422:
                    description: '422, when any validation failed.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    jsonapi: { version: '2021.02' }
                                    errors: [{ status: '422', source: { pointer: /data/attributes/name, parameter: '' }, title: 'Invalid Attribute', detail: '{validation-error-message}' }, { status: '422', source: { pointer: /data/attributes/sort, parameter: '' }, title: 'Invalid Attribute', detail: '{validation-error-message}' }]
                                properties:
                                    jsonapi: { type: object, example: { version: '2021.02' } }
                                    errors: { type: array, example: [{ status: '422', source: { pointer: /data/attributes/name, parameter: '' }, title: 'Invalid Attribute', detail: '{validation-error-message}' }, { status: '422', source: { pointer: /data/attributes/sort, parameter: '' }, title: 'Invalid Attribute', detail: '{validation-error-message}' }], items: { type: object } }
            tags:
                - '02. Categories'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: 'The name of the category.'
                                    example: saberLiou
                                sort:
                                    type: integer
                                    description: 'The sort of the category.'
                                    example: 0
                            required:
                                - name
        get:
            summary: '2-1. Display a listing of the categories.'
            description: ''
            parameters:
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, when categories displayed.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    jsonapi: { version: '2021.02' }
                                    data: [{ id: 1, type: categories, attributes: { slug: category, name: category, sort: 0, created_at: '1970-01-01 00:00:00', updated_at: '1970-01-01 00:00:00' }, relationships: { user: { data: { id: 1, name: saberLiou, email: saberliou@gmail.com, email_verified_at: null, created_at: '1970-01-01 00:00:00', updated_at: '1970-01-01 00:00:00' } }, posts: [] } }]
                                    links: { self: 'http://kniflow.test/api/categories' }
                                properties:
                                    jsonapi: { type: object, example: { version: '2021.02' } }
                                    data: { type: array, example: [{ id: 1, type: categories, attributes: { slug: category, name: category, sort: 0, created_at: '1970-01-01 00:00:00', updated_at: '1970-01-01 00:00:00' }, relationships: { user: { data: { id: 1, name: saberLiou, email: saberliou@gmail.com, email_verified_at: null, created_at: '1970-01-01 00:00:00', updated_at: '1970-01-01 00:00:00' } }, posts: [] } }], items: { type: object } }
                                    links: { type: object, example: { self: 'http://kniflow.test/api/categories' } }
            tags:
                - '02. Categories'
            security: []
    '/api/categories/{category}':
        get:
            summary: '2-3. Display the specified category.'
            description: ''
            parameters:
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, when category displayed.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    jsonapi: { version: '2021.02' }
                                    data: { id: 1, type: categories, attributes: { slug: saberliou, name: saberLiou, sort: 0, created_at: '1970-01-01 00:00:00', updated_at: '1970-01-01 00:00:00' }, relationships: { user: { data: { id: 1, name: saberLiou, email: saberliou@gmail.com, email_verified_at: null, created_at: '1970-01-01 00:00:00', updated_at: '1970-01-01 00:00:00' } }, posts: [] } }
                                    links: { self: 'http://kniflow.test/api/categories/saberLiou' }
                                properties:
                                    jsonapi: { type: object, example: { version: '2021.02' } }
                                    data: { type: object, example: { id: 1, type: categories, attributes: { slug: saberliou, name: saberLiou, sort: 0, created_at: '1970-01-01 00:00:00', updated_at: '1970-01-01 00:00:00' }, relationships: { user: { data: { id: 1, name: saberLiou, email: saberliou@gmail.com, email_verified_at: null, created_at: '1970-01-01 00:00:00', updated_at: '1970-01-01 00:00:00' } }, posts: [] } } }
                                    links: { type: object, example: { self: 'http://kniflow.test/api/categories/saberLiou' } }
                404:
                    description: '404, when category not found.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    jsonapi: { version: '2021.02' }
                                    errors: [{ status: '404', source: { pointer: '', parameter: '' }, title: 'Not Found', detail: 'Cannot find the resource.' }]
                                properties:
                                    jsonapi: { type: object, example: { version: '2021.02' } }
                                    errors: { type: array, example: [{ status: '404', source: { pointer: '', parameter: '' }, title: 'Not Found', detail: 'Cannot find the resource.' }], items: { type: object } }
            tags:
                - '02. Categories'
            security: []
        parameters:
            -
                in: path
                name: category
                description: ''
                example: aut
                required: true
                schema:
                    type: string
components:
    securitySchemes:
        default:
            type: http
            scheme: bearer
            description: ''
security:
    -
        default: []
